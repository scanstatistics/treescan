#!/bin/sh

# Check for minimum number of arguments.
REQUIRED_ARGS=1 # Script requires 3 argument
if [ $# -lt "$REQUIRED_ARGS" ]
then
  echo "Usage: `basename $0` <treescan_src directory> <boost directory> <binaries output directory>])"
  echo "   example: `basename $0` /Users/treescan/prj/treescan.development/treescan /Users/treescan/prj/boost/boost_1_70_0 /Users/treescan/prj/treescan.development/binaries/mac"
  exit 1
fi

(
cpp_compiler="/usr/bin/g++"
osx_min_version="-mmacosx-version-min=10.9"
binaries="$3"
treescan_src="$1"
boost_src="$2"
processors="-j2"

rm -f $binaries/*


# Intel command-line binaries

echo building TreeScan for 64-bit system - x86_64
./makescript.mac.sh $binaries/treescan $treescan_src $boost_src -m64 -O3 $cpp_compiler "-arch x86_64" $osx_min_version $processors

# Intel JNI libraries

echo building TreeScan shared object for 64-bit system - x86_64
./makescript.so.mac.sh $binaries/libtreescan.jnilib $treescan_src $boost_src -m64 -O3 $cpp_compiler "-arch x86_64" $osx_min_version $processors

# codesign binaries
security unlock-keychain $HOME/Library/Keychains/login.keychain
codesign --force -v --deep -s "Developer ID Application: Information Management Services, Inc. (VF82MCMA83)" $binaries/treescan
codesign --force -v --deep -s "Developer ID Application: Information Management Services, Inc. (VF82MCMA83)" $binaries/libtreescan.jnilib

) 1> build.stdout 2> build.stderr
