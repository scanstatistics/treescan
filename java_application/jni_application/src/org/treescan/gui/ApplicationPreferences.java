package org.treescan.gui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.UndoManager;
import org.treescan.app.Parameters;
import org.treescan.gui.utils.Utils;
import java.util.prefs.Preferences;
import java.lang.StringBuffer;

/**
 * @author  Hostovic
 */
public class ApplicationPreferences extends javax.swing.JDialog {
    private static ApplicationPreferences _instance;
    private static String CHECK_FREQUENCY_KEY = "check-frequency";
    private static String CHECK_DATE_KEY = "check-date";
    private static String KEY_DATE_FORAMT = "yyyy-MM-dd";
    private static String CHECK_WEEKLY_KEY = "Once a week";
    private static String CHECK_MONTHLY_KEY = "Once a month";
    private static String CHECK_EVERYTIME_KEY = "Each time application starts";
    private static String CHECK_NEVER_KEY = "Never";

    /** Creates new form ExecutionOptionsDialog */
    public ApplicationPreferences(java.awt.Frame parent) {
        super(parent, true);
        _instance = this;
        initComponents();
        _checkFrequency.setModel(new javax.swing.DefaultComboBoxModel(updateFrequencyChoices()));
        _checkFrequency.setSelectedItem(getUpdateFrequency());
        setLocationRelativeTo(parent);
    }

    /*
     * Returns application update frequency choices
     */
    public static String[] updateFrequencyChoices() {
        return new String[] { CHECK_EVERYTIME_KEY, CHECK_WEEKLY_KEY, CHECK_MONTHLY_KEY, CHECK_NEVER_KEY };
    }
    
    /*
     * Sets the application update frequency setting. 
     */
    public static void setUpdateFrequency(String choice) {
        Preferences prefs = Preferences.userNodeForPackage(TreeScanApplication.class);
        prefs.put(CHECK_FREQUENCY_KEY, choice);        
    }
    
    /*
     * Sets the application update frequency setting. 
     */
    public static String getUpdateFrequency() {
        Preferences prefs = Preferences.userNodeForPackage(TreeScanApplication.class);
        return prefs.get(CHECK_FREQUENCY_KEY, CHECK_MONTHLY_KEY);
    }
    
    /*
     * Sets last time checked as now.
     */
    public static Date lastCheckedNow() {
        SimpleDateFormat sdf = new SimpleDateFormat(KEY_DATE_FORAMT, Locale.ENGLISH);
        Date date = new Date();
        Preferences.userNodeForPackage(TreeScanApplication.class).put(CHECK_DATE_KEY, sdf.format(date));
        return date;
    }
    
    /*
     * Returns whether user preferences indicate that we should check for preferences now.
     */
    public static boolean shouldCheckUpdate() {
        try {
            Preferences prefs = Preferences.userNodeForPackage(TreeScanApplication.class);
            String frequency = prefs.get(CHECK_FREQUENCY_KEY, CHECK_WEEKLY_KEY);
            if (frequency.equalsIgnoreCase(CHECK_NEVER_KEY)) {
                return false;
            } else if (frequency.equalsIgnoreCase(CHECK_EVERYTIME_KEY)) {
                    return true;
            } else {
                try {
                    Date lastCheck = new SimpleDateFormat(KEY_DATE_FORAMT, Locale.ENGLISH).parse(prefs.get(CHECK_DATE_KEY, ""));
                    Calendar calendar = new GregorianCalendar();
                    if (frequency.equalsIgnoreCase(CHECK_MONTHLY_KEY)) {
                        calendar.add(Calendar.MONTH, -1);
                    } else { // default CHECK_WEEKLY_KEY
                        calendar.add(Calendar.DAY_OF_MONTH, -7);
                    }       
                    return lastCheck.before(calendar.getTime());
                } catch (ParseException ex) { // last check not set or bad string
                    return true;
                }
            }
        } finally {
            lastCheckedNow();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parallelProcessorsGroup = new javax.swing.JPanel();
        _checkFrequency = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setTitle("Preferences");
        setModal(true);
        setResizable(false);

        parallelProcessorsGroup.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Automatic Updates"));

        jLabel1.setText("Check for application updates on startup:");

        javax.swing.GroupLayout parallelProcessorsGroupLayout = new javax.swing.GroupLayout(parallelProcessorsGroup);
        parallelProcessorsGroup.setLayout(parallelProcessorsGroupLayout);
        parallelProcessorsGroupLayout.setHorizontalGroup(
            parallelProcessorsGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallelProcessorsGroupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parallelProcessorsGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_checkFrequency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addContainerGap())
        );
        parallelProcessorsGroupLayout.setVerticalGroup(
            parallelProcessorsGroupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parallelProcessorsGroupLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(11, 11, 11)
                .addComponent(_checkFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                setVisible(false);
            }
        });

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent e) {
                setUpdateFrequency(_instance._checkFrequency.getSelectedItem().toString());
                _instance.setVisible(false);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parallelProcessorsGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(parallelProcessorsGroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox _checkFrequency;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel parallelProcessorsGroup;
    // End of variables declaration//GEN-END:variables
}
